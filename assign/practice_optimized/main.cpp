/**
 * This program creates a simple "hash" of
 * a person's name. A hash is an integer that is
 * mathematically derived from another object.
 * In this case, a string (the first and last name)
 * is accessed character by character and the hash
 * is built up from a number generated by each character.
 * While this function does not necessarily produce
 * unique hashes (different names can hash to the
 * same value), there is a relatively low possibility
 * of a "collision" with a class of roughly 400 students.
 *
 * We will learn more about hashing later this quarter!
 */

#include <iostream>
#include <string>
#include "console.h"
#include <cmath>

using namespace std;

int getInput();
void outPutPinetree(int layer);
void outPutPinetreeHollow(int layer);

int main() {
    int layer_num = getInput();
    outPutPinetree(layer_num);
    outPutPinetreeHollow(layer_num);
    return 0;
}

int getInput(){
    int num;
    cout << "please enter a int num: ";
    cin >> num;
    if (num == 0){
        num = 6;
    }
    return num;
}

void outPutPinetreeHollow(int layer_num){
    cout << "This is the hollow case pinetree:" << endl;

    for(int i = layer_num; i > 0; i--){
        for(int j = -layer_num; j <= layer_num; j++){
            int sum = abs(i) + abs(j);

            if(i==1){
                if(sum <= layer_num && (sum) % 2 == 0){
                    cout << layer_num;
                }
                else{
                    cout << " ";
                }
            }
            else if(sum == layer_num){
                cout << layer_num - i + 1;
            }
            else{
                cout << ' ';
            }
        }
        cout << endl;
    }
}

void outPutPinetree(int layer_num){
    cout << "This is the full case pinetree:" << endl;
    for(int i = layer_num; i > 0; i--){

        for(int j = -layer_num; j <= layer_num; j++){
            int sum = abs(i) + abs(j);
            if(sum <= layer_num && sum % 2 == 0){
                cout << layer_num - i + 1;
            }
            else{
                cout << " ";
            }
        }
        cout << endl;
    }
}

