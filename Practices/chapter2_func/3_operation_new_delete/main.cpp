/**
 * This program creates a simple "hash" of
 * a person's name. A hash is an integer that is
 * mathematically derived from another object.
 * In this case, a string (the first and last name)
 * is accessed character by character and the hash
 * is built up from a number generated by each character.
 * While this function does not necessarily produce
 * unique hashes (different names can hash to the
 * same value), there is a relatively low possibility
 * of a "collision" with a class of roughly 400 students.
 *
 * We will learn more about hashing later this quarter!
 */

#include <iostream>
#include <string>
#include <cmath>
#include "console.h"

using namespace std;

/* This is a practice of new and delete operation in c++, which is similar as malloc and free operation
 * in c labguage.
 * The basic operation with new is:
 * pointer_variable = new variable_name
 * followed by a delete operation to free the storage space of new.
 * The basic operation with delete is:
 * delete pointer_variable.
 */



int main() {
    int *p;
    p = new int;

    /*to get a space of int variable from the memory
     * in case that the memory asking failed one condition of if is added
    */

    if(p == NULL){
        return 1;
    }

    /*Only if the requirement of space succeeded, the following sentences will be executed,
     * else the function will be stopped with a returned value as 1
     */

    *p = 8;
    cout << "the value pointer p pointing is "<< *p << endl;
    /* this is not good cuz the memory was not released yet, so one delete operation is introduced,
     * remember delete operation can be used once, double usage of delete will result in the breakage
     * so one more operation of setting the content in p as NULL is introduced here to avoid
     * multi-delete operation usages.
     */

    delete p;
    // delete p;
    p = NULL;

    /*to get a contiguous space for int variable from the memory
     * in case that the memory asking failed one condition of if is added
    */

    char *q = new char[10];
    if(q == NULL){
        return 1;
    }

    /*to set the value inside the array*/
    cout << endl;
    for(int i = 0; i <= 9; i++){
        q[i] = 'A' + i;
    }
    /*to output the contents inside the array*/

    for(int i = 0; i <= 9; i++){
        cout << q[i] << '\t';
    }
    /* after usage of the new operation, the delete operation must be introduced, also to avoid multi-delete operation
     * the content should be set as NULL to avoid confliction of multi-usages.
     * to be noticed the array(continuguous space) need to be free as the format of:
     * delete []pointer_variable
     */

    delete []q;
    q = NULL;

    /* another method to set the int space for pointer with new and delete operation(with direct initialization)
     * This method doesn't concern the case where the access of new failed
     */

    int *r = new int(88);
    cout << "The int value of new is " << *r << endl;
    delete r;
    r = NULL;


    return 0;
}
