/**
 * This program creates a simple "hash" of
 * a person's name. A hash is an integer that is
 * mathematically derived from another object.
 * In this case, a string (the first and last name)
 * is accessed character by character and the hash
 * is built up from a number generated by each character.
 * While this function does not necessarily produce
 * unique hashes (different names can hash to the
 * same value), there is a relatively low possibility
 * of a "collision" with a class of roughly 400 students.
 *
 * We will learn more about hashing later this quarter!
 */

#include <iostream>
#include <string>
#include <cmath>
#include "console.h"

using namespace std;
/* - in the value passing, the addresses of real parameters and the formal parameters should be different, so when
 * modifications made the real parameters will be protected without any changes. The modificatio only made for the formal
 * parameters inside the value passing functions.
 * - in the poniter passing functions, the addresses of real parameters are stored in the formal parameters, and when
 * the function runs the function will access the address stored in the formal parameters and make modification on them.
 * - in the reference passing functions, real parameters are called with reference method directly providing the real
 * parameters an alias, in this case, x and y, to directly make the modification on the addresses there.
 */

/*to pass the values*/
void swapValue(int x, int y);

/*to pass the addresses pointers*/
void swapAddress(int *x, int *y);

/*to pass the references*/
void swapReference(int &x, int &y);


int main() {
    int a = 3;
    int b = 4;      //define the variables a and b
    cout << "In the values functions:" << endl;
    cout << "in the main function:" << endl;
    cout << "The address of a is " << &a << "\t" << "the addresss of b is " << &b << endl;     // print the addresses of a and b
    cout << "value of a is " << a << "      " << "value of b is "  << b << endl;
    swapValue(a, b);     //call the function swap and pass the variable of a and b


    cout << "*********************************************************" << endl;
    cout << "In the pointers functions:" << endl;
    cout << "before swap, the address of a is " << &a << "      " << "the address of b is " << &b << endl;
    swapAddress(&a, &b);
    cout << "in main after swap: value of a is " << a << "      " << "value of b is "  << b << endl;
    a = 3;
    b = 4;


    cout << "*********************************************************" << endl;
    cout << "In the reference functions:" << endl;
    cout << "before swap, the address of a is " << &a << "      " << "the address of b is " << &b << endl;
    cout << "before swap, the value of a is " << a << "     " << "the value of b is " << b << endl;
    swapAddress(&a, &b);
    cout << "in main after swap: value of a is " << a << "      " << "value of b is "  << b << endl;

    return 0;
}

void swapValue(int x, int y){
    cout << "in the function &a = " << &x << "\t" << "&b = " << &y << endl;
    int temp;
    temp = x;
    cout << "&temp = " << &temp << endl;
    x = y;
    y = temp;
    cout << "in function after swap: value of a is " << x << "      " << "value of b is "  << y << endl;
}

void swapAddress(int *x, int *y){
    cout << "in the function a = " << *x << "\t" << "b = " << *y << endl;
    cout << "in the function address of a is " << x << "\t" << "address of b is " << y << endl;
    int temp;
    temp = *x;
    cout << "&temp = " << &temp << endl;
    *x = *y;
    *y = temp;
    cout << "after swap: value of a is " << *x << "      " << "value of b is "  << *y << endl;
}

void swapReference(int &x, int &y){
    cout << "in the function a = " << x << "\t" << "b = " << y << endl;
    cout << "in the function address of a is " << &x << "\t" << "address of &b is " << y << endl;
    int temp;
    temp = x;
    cout << "&temp = " << &temp << endl;
    x = y;
    y = temp;
    cout << "after swap: value of a is " << x << "      " << "value of b is "  << y << endl;
}
