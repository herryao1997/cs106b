/**
 * This program creates a simple "hash" of
 * a person's name. A hash is an integer that is
 * mathematically derived from another object.
 * In this case, a string (the first and last name)
 * is accessed character by character and the hash
 * is built up from a number generated by each character.
 * While this function does not necessarily produce
 * unique hashes (different names can hash to the
 * same value), there is a relatively low possibility
 * of a "collision" with a class of roughly 400 students.
 *
 * We will learn more about hashing later this quarter!
 */

#include <iostream>
#include <string>
#include <cmath>
#include "console.h"

using namespace std;
/* - reload function is used to give similar work a shared name, for instance:
 * int sum(int x, int y);
 * int sum(int x, int y, int z);
 * - the system will identify which function to be call through the number and the type of the real parameters, which is
 * known as function reloading
 * - to use the reload, the functions should:
 * 1. have same function name
 * 2. have different number of parameters or type of parameters or order for data regarding types
 * 3. the ambiguous situation should be avoid, eg:
 * int sum(int x, int y);
 * double sum(double x, double y);
 * --------------------------------------------------------------------------------------
 * //the following cases are both triggering the ambiguous, which cases should be avoided.
 * --------------------------------------------------------------------------------------
 * cout << sum(1, 2.5);
 * cout << sum(2.5, 1);
 * - if there is only one difference between reload functions which is returned type, this is illegal eg:
 * float cube(float f);
 * double cube(float f);
 * --------------------------------------------------------------------------------------
 * - the reload function with a function with incomplete parameters will result in ambiguous situation eg:
 * void circle(int r = 0, int x = 0, int y = 0);
 * void circle(int r = 0);
 */

int sum(int x, int y);
int sum(int x, int y, int z);
double sum(double x, double y);
double sum (int x, double y);
double sum (double x, int y);

int main() {
    int x1, x2;
    double x3;
    x1 = sum(3, 4);
    x2 = sum(3, 4, 5);

    cout << sum(x1, x2) << " is the final value of the addition!"<< endl;
    cout << "===========================================================" << endl;
    x3 = sum(2.5, 5.0);
    cout << x3 << endl;
    cout << "===========================================================" << endl;
    x3 = sum(2.5, 3);
    cout << x3 << endl;
    cout << "===========================================================" << endl;
    x3 = sum(3, 2.5);
    cout << x3 << endl;
    return 0;
}

int sum (int x, int y){
    cout << "I am in the function with 2 parameters!" << endl;
    return x + y;
}

int sum (int x, int y, int z){
    cout << "I am in the function with 3 parameters!" << endl;
    return x + y + z;
}

double sum (double x, double y){
    cout << "I am in the function with 2 double parameters!" << endl;
    return x + y;
}

double sum (int x, double y){
    cout << "I am in the function with 2 double parameters, where 2nd is double!" << endl;
    return x + y;
}

double sum (double x, int y){
    cout << "I am in the function with 2 double parameters, where 1st is double!" << endl;
    return x + y;
}
