/**
 * This program creates a simple "hash" of
 * a person's name. A hash is an integer that is
 * mathematically derived from another object.
 * In this case, a string (the first and last name)
 * is accessed character by character and the hash
 * is built up from a number generated by each character.
 * While this function does not necessarily produce
 * unique hashes (different names can hash to the
 * same value), there is a relatively low possibility
 * of a "collision" with a class of roughly 400 students.
 *
 * We will learn more about hashing later this quarter!
 */

#include <iostream>
#include <string>
#include <cmath>
#include "console.h"

using namespace std;
/* - class class_name{
 *      public:
 *             public_data;
 *             public_functions;
 *      protected:
 *             protected_data;
 *             protected_functions;
 *      private:
 *             private_data;
 *             private_functions;
 * };
 * ================================================================================
 * - to be noticed when the object instantiated, the private data cannot be
 *  accessed directly, to do so the functions methods should be built.
 * - it is promised by the public members to make link between class objects and outside functions
 * - functions can be achieved outside the class by using :: to identify the attribution of the
 * memberfunctions.
 * - to define the member function outside the class the basic format should be as followed:
 * ================================================================================
 * class class_name{
 * public:
 *      declaration of the function;
 * };
 *
 * returned_type class_name::member_function_name(parameters_declarations){
 *          member_function_bodys;
 * }
 * ================================================================================
 *
 * - one more thing to be noticed: when the function defined in the class body, it will be, by default,
 *  identified as an inline function. However, when defined outside the class body, the inline keyword should be added.
 *
 */

class Point{
private:
    int x, y;
public:
    void set();

    void show();
};

int main() {
    Point p1;
    //p1.x = 1; // This will not work due to x, y are private datas
    p1.set();
    p1.show();
    return 0;
}

int getSum (int a, int b){
    return a + b;
}

inline void Point::show(){
    cout << "(" << x << ", " << y << ")" << endl;
}

inline void Point::set(){
    cout << "please enter the value for x and y: " << endl;
    cin >> x >> y;
}
